import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.enums import ChatAction
from aiogram.types import ReplyKeyboardRemove
from dotenv import load_dotenv
from keyboards import ButtonText, get_new_start_kb
import logging
import os
import sqlite3


load_dotenv()

bot = Bot(os.getenv('BOT_TOKEN'))
dp = Dispatcher(bot=bot)


conn = sqlite3.connect('orders.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS orders
               (id_order INTEGER PRIMARY KEY AUTOINCREMENT,
               id_username INTEGER,
               file_id TEXT,
               quantity INTEGER,
               size TEXT,
               description TEXT,
               price INTEGER,
               data_order DATETIME DEFAULT (strftime('%Y-%m-%d %H:%M:%S',
               'now', 'localtime')))
               ''')
conn.commit()


@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."""
    text = (f'{message.from_user.full_name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å üòä\n'
            '–î–ª—è –Ω–∞—á–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üì∑')
    await message.answer(
        text=text,
        reply_markup=get_new_start_kb(),
        )


@dp.message(F.photo, ~F.caption)
async def handle_photo(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–µ–º–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ"
    await message.bot.send_chat_action(
        chat_id=message.chat.id,
        action=ChatAction.UPLOAD_PHOTO,
    )
    file_id = message.photo[-1].file_id
    id_username = message.from_user.full_name
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO orders (id_username, file_id) VALUES (?, ?)", (
        id_username,
        file_id,
        ))
    conn.commit()
    text = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:"
    await message.answer(text=text)


@dp.message(F.text == ButtonText.WHATS_NEXT)
@dp.message(Command("help"))
async def handle_help(message: types.Message):
    text = "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞:\n @aa_fdv"
    await message.answer(text=text)


@dp.message(F.text == ButtonText.BYE)
async def handle_bye(message: types.Message):
    await message.answer(
        text="–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ /start .",
        reply_markup=ReplyKeyboardRemove()
        )


@dp.message()
async def answer(message: types.Message):
    await message.reply('–ü—Ä–æ—Å—Ç–∏—Ç–µ, —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.')


async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
